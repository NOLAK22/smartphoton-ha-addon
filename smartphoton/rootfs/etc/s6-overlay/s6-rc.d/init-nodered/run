#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Node-RED
# Configures Node-RED before running
# ==============================================================================
declare port

# Migrate add-on data from the Home Assistant config folder,
# to the add-on configuration folder.
#if ! bashio::fs.file_exists '/config/settings.js' \
#    && bashio::fs.file_exists '/homeassistant/node-red/settings.js'; then
#    shopt -s dotglob
#    mv /homeassistant/node-red/* /config/ \
#        || bashio::exit.nok "Failed to migrate Node-RED configuration"
#fi

# Ensure configuration exists
if ! bashio::fs.directory_exists '/config/smartphoton/'; then
    mkdir -p /config/smartphoton/nodes \
        || bashio::exit.nok "Failed to create node-red configuration directory"

    # Copy in template files
    cp /etc/node-red/flows.json /config/smartphoton/
    cp /etc/node-red/settings.js /config/smartphoton/
	

    # Create random flow id
    id=$(node -e "console.log((1+Math.random()*4294967295).toString(16));")
    sed -i "s/%%ID%%/${id}/" "/config/smartphoton/flows.json"
fi

# VÃ©rification de version
if ! bashio::fs.file_exists '/config/smartphoton/version'; then
  touch /config/smartphoton/version
  VERSION=$(bashio::addon.version)
  echo $VERSION >> /config/smartphoton/version
  chmod 775 /config/smartphoton/version
  bashio::log.info "${VERSION}"
  
else

  VERSIONOLD=$(cat /config/smartphoton/version)
  VERSION=$(bashio::addon.version)
  
  if [ $VERSIONOLD != $VERSION ]; then
  
    bashio::log.info "Mise a jour de la nouvelle version"
  
    if bashio::fs.file_exists '/config/smartphoton/flows.backup'; then
      rm /config/smartphoton/flows.backup
    fi
	mv /config/smartphoton/flows.json /config/smartphoton/flows.backup
	cp /etc/node-red/flows.json /config/smartphoton/
	
	if bashio::fs.file_exists '/config/.storage/lovelace.dashboard_smartphoton.backup'; then
      rm /config/.storage/lovelace.dashboard_smartphoton.backup
    fi
	if bashio::fs.file_exists '/config/.storage/lovelace.dashboard_smartphoton'; then
      mv /config/.storage/lovelace.dashboard_smartphoton /config/.storage/lovelace.dashboard_smartphoton.backup
	  cp /etc/node-red/lovelace.dashboard_smartphoton /config/.storage/
    fi
	
  fi
  
fi

#batterie=$(bashio::config 'batterie')
#onduleur=$(bashio::config 'onduleur')

if bashio::fs.file_exists '/config/smartphoton/usbOnduleur'; then
  rm /config/smartphoton/usbOnduleur
fi

if bashio::fs.file_exists '/config/smartphoton/usbBatterie'; then
  rm /config/smartphoton/usbBatterie

fi

touch /config/smartphoton/usbOnduleur
ONDULEUR=$(bashio::config 'onduleur')
echo $ONDULEUR >> /config/smartphoton/usbOnduleur
bashio::log.info "${ONDULEUR}"


touch /config/smartphoton/usbBatterie
BATTERIE=$(bashio::config 'batterie')
echo $BATTERIE >> /config/smartphoton/usbBatterie
bashio::log.info "${BATTERIE}"


#remplace usb de l'onduleur
ttyOnduleur="/dev/tty-onduleur"
echo $ttyOnduleur
echo $ONDULEUR

sed -i -e "s@$ttyOnduleur@$ONDULEUR@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log


#remplace usb de l'pylontech
ttyPylontech="/dev/tty-pylontech"
echo $ttyPylontech
echo $ONDULEUR

sed -i -e "s@$ttyPylontech@$BATTERIE@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log

#remplace usb de ttyEASUN
ttyPylontech="/dev/ttyEASUN"
EASUN=$(bashio::config 'easun')
echo $ttyEASUN
echo $EASUN

sed -i -e "s@$ttyEASUN@$EASUN@g" /config/smartphoton/flows.json >> /config/smartphoton/flows.log


# Pass in port & SSL settings
port=$(bashio::addon.port 80)
sed -i "s/%%PORT%%/${port:-80}/" "/opt/node_modules/node-red-dashboard/nodes/ui_base.html"
if ! bashio::var.has_value "${port}"; then
    bashio::log.warning
    bashio::log.warning "Direct access mode is disabled, Node-RED Dashboard"
    bashio::log.warning "will not work!"
    bashio::log.warning
    bashio::log.warning "Please assign a port in the Network section of this"
    bashio::log.warning "add-on configuration."
    bashio::log.warning
fi

if bashio::config.true 'ssl'; then
    sed -i "s/%%SSL%%/true/" "/opt/node_modules/node-red-dashboard/nodes/ui_base.html"
else
    sed -i "s/%%SSL%%/false/" "/opt/node_modules/node-red-dashboard/nodes/ui_base.html"
fi

# Ensures conflicting Node-RED packages are absent
cd /config || bashio::exit.nok "Could not change directory to Node-RED"
if bashio::fs.file_exists "/config/package.json"; then
    npm uninstall \
        node-red-contrib-home-assistant \
        node-red-contrib-home-assistant-llat \
        node-red-contrib-home-assistant-ws \
            || bashio::log.warning "Failed un-installing conflicting packages"
fi
